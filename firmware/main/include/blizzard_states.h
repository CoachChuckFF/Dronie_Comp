/* Copyright (C) Blizzard Lighting LLC. - All Rights Reserved
 * Unauthorized copying of this file, via any medium is strictly prohibited
 * Proprietary and confidential
 * Written by Christian Krueger <christian@blizzardlighting.com>, January 2018
 *
 * Global Defines-> blizzard_states.h
 *
 */

#ifndef BLIZZARD_STATES_DEFINES_H
#define BLIZZARD_STATES_DEFINES_H

#include "blizzard_keys.h"

#ifdef __cplusplus
extern "C" {
#endif

#define BATTERY_LEVEL_5 90
#define BATTERY_LEVEL_4 70
#define BATTERY_LEVEL_3 50
#define BATTERY_LEVEL_2 20
#define BATTERY_LEVEL_1 10

#define CONTROL_DT_COUNT 1
#define CLUE_1_DT_COUNT 2
#define CLUE_2_DT_COUNT 8

typedef enum {
    BUTTON_ACTION_NOTHING,
    BUTTON_ACTION_HOLD,
    BUTTON_ACTION_HELD,
    BUTTON_ACTION_TAP,
    BUTTON_ACTION_DOUBLE_TAP,
    BUTTON_ACTION_TOGGLE_SHOW,
    BUTTON_ACTION_SLEEP,
} ButtonAction;

typedef enum {
    UI_IDLE_STATE_NO_CONNECTION,
    UI_IDLE_STATE_WIFI_EZ_CONNECTING,
    UI_IDLE_STATE_WIFI_CONNECTING,
    UI_IDLE_STATE_WIFI_CONNECTED,
    UI_IDLE_STATE_WIFI_ERROR_BAD_PASS,
    UI_IDLE_STATE_WIFI_ERROR_BAD_SSID,
    UI_IDLE_STATE_WIFI_ERROR_BAD_WIFI,
    UI_IDLE_STATE_AP_IDLE,
    UI_IDLE_STATE_AP_DEVICE_CONNECTED,
    UI_IDLE_STATE_MUTE,
    UI_IDLE_STATE_LOCATE,

    UI_TEMP_STATE_ACTION,

    UI_USER_STATE_UNDEFINED,
    UI_USER_STATE_IDLE, //encompassing state
    UI_USER_STATE_REBOOT,
    UI_USER_STATE_RECORD,
    UI_USER_STATE_RECORD_CONFIRM,
    UI_USER_STATE_PRE_RECORDING,
    UI_USER_STATE_RECORDING,
    UI_USER_STATE_LISTEN,
    UI_USER_STATE_LISTEN_CONFIRM,
    UI_USER_STATE_LISTENING,
    UI_USER_STATE_START_AP,
    UI_USER_STATE_START_AP_CONFIRM,
    UI_USER_STATE_START_WIFI,
    UI_USER_STATE_START_WIFI_CONFIRM,
    UI_USER_STATE_FACTORY_RESET,
    UI_USER_STATE_FACTORY_RESET_CONFIRM,

    UI_USER_STATE_BATTERY, //encompassing state
    UI_BATTERY_STATE_LEVEL_CRIT,
    UI_BATTERY_STATE_LEVEL_5,
    UI_BATTERY_STATE_LEVEL_4,
    UI_BATTERY_STATE_LEVEL_3,
    UI_BATTERY_STATE_LEVEL_2,
    UI_BATTERY_STATE_LEVEL_1,
    UI_BATTERY_STATE_CHARGING,
    UI_BATTERY_STATE_DONE_CHARGING,
    
    UI_USER_STATE_CONTROL,

    UI_SECRET_STATE_CLUE_1,
    UI_SECRET_STATE_CLUE_2,
    UI_SECRET_STATE_CLUE_3,
    UI_SECRET_STATE_RAINBOW,

    UI_QC_STATE_CONNECTING,
    UI_QC_STATE_CONNECTED,
} UIState;

typedef enum {
    BUTTON_UNSTABLE,
    BUTTON_PRESSED,
    BUTTON_RELEASED,
} ButtonState;

typedef enum {
    BUTTON_STATE_IDLE,
    BUTTON_STATE_START_TAP,
    BUTTON_STATE_HOLD,
    BUTTON_STATE_END_TAP,
    BUTTON_STATE_START_TAP_2,
    BUTTON_STATE_END_TAP_2,
    BUTTON_STATE_DOUBLE_TAP,
    BUTTON_STATE_NOTHING,
    BUTTON_STATE_START_TAP_3,
    BUTTON_STATE_END_TAP_3,
    BUTTON_STATE_START_TAP_4,
    BUTTON_STATE_END_TAP_4,
    BUTTON_STATE_START_TAP_5,
    BUTTON_STATE_DONE,
} ButtonActionState;

typedef enum {
    SHOW_STATE_PLAY,
    SHOW_STATE_STOP,
    SHOW_STATE_PAUSE
} ShowState;

typedef enum {
    SHOW_INTERNAL_ERROR,
    SHOW_INTERNAL_EMPTY,
    SHOW_INTERNAL_OK,
} ShowInternalState;

typedef enum {
    OTA_STATE_IDLE,
    OTA_STATE_FIRMWARE,
    OTA_STATE_SHOW,
} OTAState;

typedef enum {
    RECORDER_STATE_RECORDING,
    RECORDER_STATE_IDLE,
} RecorderState;

typedef enum {
    BATTERY_STATE_CHARGING,
    BATTERY_STATE_DONE_CHARGING,
    BATTERY_STATE_NOT_CHARGING,
} BatteryState;

#ifdef __cplusplus
}
#endif

#endif